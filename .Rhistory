,"Gage"
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"QCRaw"= {
# runs the ReportQC as part of sourced function but can run independently below
fun.QC(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportQC" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"QC"
)
},
"Aggregate" = {
fun.AggregateData(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportAggregate" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"DATA"
)
},
"SummaryStats" = {
fun.Stats(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"STATS"
,"DATA"
)
},
{
stop(paste0("Unable to process myData.Operation == ", myData.Operation))
}
)
source('~/tn_realtime/working/R_scripts/Scripts/fun.QC.R')
#!/cygdrive/c/Program Files/R/R-3.3.2patched/bin/R
#
# Manipulates Continuous Data Files (run different operations based on user input below)
# Erik.Leppo@tetratech.com (EWL), 2015-11-19
#
#################
# It is assumed that this R script is stored in a directory with the data files as subdirectories.
# If this script is run in TINN-R or R-Studio there is no need to define the working directory
#
####################################################################
# clear the workspace
# print("hello")
rm( list = ls() )
# Define working Directory
myDir.BASE <- "C:/Data_and_Tools/tn_realtime/working/R_scripts"
myDir.Scripts <- "Scripts"
# load all other libraries via the InitializeLibs.R
setwd(file.path(myDir.BASE, myDir.Scripts))
debugSource("fun.InitializeLibs.R")
setwd(myDir.BASE)
#####################################################################
# USER input in this section (see end of script for explanations)
#####################################################################
# PROMPT; Operation
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
myData.Operation    <- Selection.Operation[2]  # number corresponds to intended operation in the line above
if (! nchar(myData.Operation) >= 5) {
stop('Must select a myData.Operation!')
}
# PROMPT; Site ID
# single site;         "test2"
# group of sites;      c("test2", "HRCC", "PBCC", "ECO66G12", "ECO66G20", "ECO68C20", "01187300")
myData.SiteID       <- "HRCC"
QC.SiteID.myDelim <- grepl(myDelim, myData.SiteID) #T/F
if(QC.SiteID.myDelim == TRUE)
{
stop(paste0("SiteID (",myData.SiteID,") contains the delimiter [",myDelim,
"] used in parsing file names.\nChange SiteID name so it does not include the delimiter."))
}
#
# PROMPT; Data Type
# Type of data file
Selection.Type <- c("Air","Water","AW","Gage","AWG","AG","WG") # only one at a time
myData.Type    <- Selection.Type[2] #number corresponds to intended operation in the line above
#
# PROMPT; Start Date
# YYYY-MM-DD ("-" delimiter), leave blank for all data ("1900-01-01")
myData.DateRange.Start  <- "2012-01-01"
#
# PROMPT; End Date
# YYYY-MM-DD ("-" delimiter), leave blank for all data (today)
myData.DateRange.End    <- "2016-12-31"
#
# PROMPT; SubDirectory, input file location.  Leave blank for defaults
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.SUB.import <- "" #   "C:\\inetpub\\wwwdjango\\tndec\\tndecsite\\documents\\incoming"    # "" #Selection.SUB[2]
# PROMPT; SubDirectory, output file location.  Leave blank for default.
myDir.SUB.export <- "C:\\inetpub\\wwwdjango\\tndec\\tndecsite\\documents\\processed\\qc_data"  # "" #Selection.SUB[3]
myDir.SUB.export <- "C:\\software\\Bitnami\\djangostack-1.10.5-0\\apps\\tndec\\tndecsite\\documents\\processed\\qc_data"
print(paste0('Data Operation = [', myData.Operation, ']'))
print(paste0('SiteID = [', myData.SiteID, ']'))
print(paste0('Data Type = [', myData.Type, ']'))
print(paste0('Data Date Range = [', myData.DateRange.Start, '] to [', myData.DateRange.End, ']'))
#################
#
# Setup and check the import and export folders for this operation
#
#################
if (myDir.SUB.import != "")
{ if (! dir.exists(myDir.SUB.import))
{
stop(paste0("1. Unable to find import folder path:\n\t",myDir.SUB.import))
}
} else {
switch(myData.Operation,
"GetGageData" = {
myDir.SUB.import<-myName.Dir.1Raw
},
"QCRaw" = {
myDir.SUB.import<-myName.Dir.1Raw
},
"ReportQC" = {
myDir.SUB.import<-myName.Dir.2QC
},
"GetGageData" = {
myDir.SUB.import<-myName.Dir.2QC
},
"Aggregate" = {
myDir.SUB.import <- myName.Dir.3Agg
},
"SummaryStats" = {
myDir.SUB.import <- myName.Dir.3Agg
},
stop(paste0("unable to process myData.Operation == ", myData.Operation))
)
myDir.SUB.import <- file.path(normalizePath(dirname(myDir.SUB.import)), myDir.SUB.import)
if ( ! dir.exists(myDir.SUB.import) )
{
stop(paste0("2. Unable to find import folder path:\n\t", myDir.SUB.import))
}
}
print(paste0('Import Directory = [', myDir.SUB.import, ']'))
if (myDir.SUB.export != "")
{ if (! dir.exists(myDir.SUB.export))
{
stop(paste0("3. Unable to find export folder path:\n\t",myDir.SUB.export))
}
} else {
switch(myData.Operation,
"GetGageData" = {
myDir.SUB.export = myName.Dir.1Raw
},
"QCRaw" = {
myDir.SUB.export = myName.Dir.2QC
},
"ReportQC" = {
myDir.SUB.export = myName.Dir.2QC
},
"GetGageData" = {
myDir.SUB.export = myName.Dir.3Agg
},
"Aggregate" = {
myDir.SUB.export = myName.Dir.3Agg
},
"SummaryStats" = {
myDir.SUB.export = myName.Dir.4Stats
},
stop(paste0("unable to process myData.Operation == ", myData.Operation))
)
myDir.SUB.export <- file.path(normalizePath(dirname(myDir.SUB.export)), myDir.SUB.export)
if ( ! dir.exists(myDir.SUB.export) )
{
stop(paste0("4. Unable to find export folder path:\n\t",myDir.SUB.export))
}
}
print(paste0('Export Directory = [', myDir.SUB.export, ']'))
#################
#
# Run different functions based on "myOperation"
#
#################
switch(myData.Operation,
"GetGageData"= {
# runs the ReportQC as part of sourced function but can run independantly below
fun.GageData(
myData.SiteID
,"Gage"
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"QCRaw"= {
# runs the ReportQC as part of sourced function but can run independently below
fun.QC(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportQC" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"QC"
)
},
"Aggregate" = {
fun.AggregateData(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportAggregate" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"DATA"
)
},
"SummaryStats" = {
fun.Stats(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"STATS"
,"DATA"
)
},
{
stop(paste0("Unable to process myData.Operation == ", myData.Operation))
}
)
source('~/tn_realtime/working/R_scripts/Scripts/fun.QC.R')
source('~/tn_realtime/working/R_scripts/Scripts/fun.QC.R')
#!/cygdrive/c/Program Files/R/R-3.3.2patched/bin/R
#
# Manipulates Continuous Data Files (run different operations based on user input below)
# Erik.Leppo@tetratech.com (EWL), 2015-11-19
#
#################
# It is assumed that this R script is stored in a directory with the data files as subdirectories.
# If this script is run in TINN-R or R-Studio there is no need to define the working directory
#
####################################################################
# clear the workspace
# print("hello")
rm( list = ls() )
# Define working Directory
myDir.BASE <- "C:/Data_and_Tools/tn_realtime/working/R_scripts"
myDir.Scripts <- "Scripts"
# load all other libraries via the InitializeLibs.R
setwd(file.path(myDir.BASE, myDir.Scripts))
debugSource("fun.InitializeLibs.R")
setwd(myDir.BASE)
#####################################################################
# USER input in this section (see end of script for explanations)
#####################################################################
# PROMPT; Operation
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
myData.Operation    <- Selection.Operation[2]  # number corresponds to intended operation in the line above
if (! nchar(myData.Operation) >= 5) {
stop('Must select a myData.Operation!')
}
# PROMPT; Site ID
# single site;         "test2"
# group of sites;      c("test2", "HRCC", "PBCC", "ECO66G12", "ECO66G20", "ECO68C20", "01187300")
myData.SiteID       <- "HRCC"
QC.SiteID.myDelim <- grepl(myDelim, myData.SiteID) #T/F
if(QC.SiteID.myDelim == TRUE)
{
stop(paste0("SiteID (",myData.SiteID,") contains the delimiter [",myDelim,
"] used in parsing file names.\nChange SiteID name so it does not include the delimiter."))
}
#
# PROMPT; Data Type
# Type of data file
Selection.Type <- c("Air","Water","AW","Gage","AWG","AG","WG") # only one at a time
myData.Type    <- Selection.Type[2] #number corresponds to intended operation in the line above
#
# PROMPT; Start Date
# YYYY-MM-DD ("-" delimiter), leave blank for all data ("1900-01-01")
myData.DateRange.Start  <- "2012-01-01"
#
# PROMPT; End Date
# YYYY-MM-DD ("-" delimiter), leave blank for all data (today)
myData.DateRange.End    <- "2016-12-31"
#
# PROMPT; SubDirectory, input file location.  Leave blank for defaults
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.SUB.import <- "" #   "C:\\inetpub\\wwwdjango\\tndec\\tndecsite\\documents\\incoming"    # "" #Selection.SUB[2]
# PROMPT; SubDirectory, output file location.  Leave blank for default.
myDir.SUB.export <- "C:\\inetpub\\wwwdjango\\tndec\\tndecsite\\documents\\processed\\qc_data"  # "" #Selection.SUB[3]
myDir.SUB.export <- "C:\\software\\Bitnami\\djangostack-1.10.5-0\\apps\\tndec\\tndecsite\\documents\\processed\\qc_data"
print(paste0('Data Operation = [', myData.Operation, ']'))
print(paste0('SiteID = [', myData.SiteID, ']'))
print(paste0('Data Type = [', myData.Type, ']'))
print(paste0('Data Date Range = [', myData.DateRange.Start, '] to [', myData.DateRange.End, ']'))
#################
#
# Setup and check the import and export folders for this operation
#
#################
if (myDir.SUB.import != "")
{ if (! dir.exists(myDir.SUB.import))
{
stop(paste0("1. Unable to find import folder path:\n\t",myDir.SUB.import))
}
} else {
switch(myData.Operation,
"GetGageData" = {
myDir.SUB.import<-myName.Dir.1Raw
},
"QCRaw" = {
myDir.SUB.import<-myName.Dir.1Raw
},
"ReportQC" = {
myDir.SUB.import<-myName.Dir.2QC
},
"GetGageData" = {
myDir.SUB.import<-myName.Dir.2QC
},
"Aggregate" = {
myDir.SUB.import <- myName.Dir.3Agg
},
"SummaryStats" = {
myDir.SUB.import <- myName.Dir.3Agg
},
stop(paste0("unable to process myData.Operation == ", myData.Operation))
)
myDir.SUB.import <- file.path(normalizePath(dirname(myDir.SUB.import)), myDir.SUB.import)
if ( ! dir.exists(myDir.SUB.import) )
{
stop(paste0("2. Unable to find import folder path:\n\t", myDir.SUB.import))
}
}
print(paste0('Import Directory = [', myDir.SUB.import, ']'))
if (myDir.SUB.export != "")
{ if (! dir.exists(myDir.SUB.export))
{
stop(paste0("3. Unable to find export folder path:\n\t",myDir.SUB.export))
}
} else {
switch(myData.Operation,
"GetGageData" = {
myDir.SUB.export = myName.Dir.1Raw
},
"QCRaw" = {
myDir.SUB.export = myName.Dir.2QC
},
"ReportQC" = {
myDir.SUB.export = myName.Dir.2QC
},
"GetGageData" = {
myDir.SUB.export = myName.Dir.3Agg
},
"Aggregate" = {
myDir.SUB.export = myName.Dir.3Agg
},
"SummaryStats" = {
myDir.SUB.export = myName.Dir.4Stats
},
stop(paste0("unable to process myData.Operation == ", myData.Operation))
)
myDir.SUB.export <- file.path(normalizePath(dirname(myDir.SUB.export)), myDir.SUB.export)
if ( ! dir.exists(myDir.SUB.export) )
{
stop(paste0("4. Unable to find export folder path:\n\t",myDir.SUB.export))
}
}
print(paste0('Export Directory = [', myDir.SUB.export, ']'))
#################
#
# Run different functions based on "myOperation"
#
#################
switch(myData.Operation,
"GetGageData"= {
fun.GageData(
myData.SiteID
,"Gage"
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"QCRaw"= {
# runs the ReportQC as part of sourced function but can run independently below
fun.QC(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportQC" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"QC"
)
},
"Aggregate" = {
fun.AggregateData(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
)
},
"ReportAggregate" = {
fun.Report(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"DATA"
)
},
"SummaryStats" = {
fun.Stats(
myData.SiteID
,myData.Type
,myData.DateRange.Start
,myData.DateRange.End
,myDir.BASE
,myDir.SUB.import
,myDir.SUB.export
,"STATS"
,"DATA"
)
},
{
stop(paste0("Unable to process myData.Operation == ", myData.Operation))
}
)
# exit script
quit()
