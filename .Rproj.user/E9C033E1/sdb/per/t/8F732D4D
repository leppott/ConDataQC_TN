{
    "collab_server" : "",
    "contents" : "# Sourced Routine\n##################\n# Download USGS Gage Data\n##################\n# Erik.Leppo@tetratech.com (EWL)\n# 20151130\n##################\n#\n# Basic Operations:\n# download from USGS based on user selection\n# daily means\n\n\n# library (load any required helper functions)\nlibrary(dataRetrieval, quietly = TRUE, warn.conflicts = FALSE)\n\nfun.GageData <- function(fun.myData.SiteID\n                         ,fun.myData.Type\n                         ,fun.myData.DateRange.Start\n                         ,fun.myData.DateRange.End\n                         ,fun.myDir.SUB.import\n                         ,fun.myDir.SUB.export) {\n\n  # data directories\n  #\n  myDir.data.import <- fun.myDir.SUB.import\n  myDir.data.export <- fun.myDir.SUB.export\n\n  # Start Time (used to determine run time at end)\n  myTime.Start <- Sys.time()\n\n  myDate <- format(Sys.Date(),\"%Y%m%d\")\n  myTime <- format(myTime.Start,\"%H%M%S\")\n  #\n  # Verify input dates, if blank, NA, or null use all data\n  # if DateRange.Start is null or \"\" then assign it 1900-01-01\n  if (is.na(fun.myData.DateRange.Start)==TRUE||fun.myData.DateRange.Start==\"\"){fun.myData.DateRange.Start<-DateRange.Start.Default}\n  # if DateRange.End is null or \"\" then assign it today\n  if (is.na(fun.myData.DateRange.End)==TRUE||fun.myData.DateRange.End==\"\"){fun.myData.DateRange.End<-DateRange.End.Default}\n\n\n  ##################################\n  #    DD parameter   Description (\"parameter_nm\" from whatNWISdata)\n  #    01   00060     Discharge, cubic feet per second\n  #    02   00065     Gage height, feet\n  #    05   00010     Temperature, water, degrees Celsius\n  #    06   00020     Temperature, air, degrees Celsius\n  #         00095     Conductivity\n  #         00040     pH\n  #         00300     DO\n  #         63680     turbidity\n  #         00045     precip\n  #         62611     GWL\n  #         72019     WLBLS\n  #         00045     Precipitation, total, inches\n  #\n  #   param.code <- c(\"00060\"\n  #                   ,\"00065\"\n  #                   ,\"00010\"\n  #                   ,\"00020\"\n  #                   ,\"00040\"\n  #                   ,\"00045\")\n  #   param.desc <- c(\"Discharge, cubic feet per second\"\n  #                   ,\"Gage height, feet\"\n  #                   ,\"Temperature, water, degrees Celsius\"\n  #                   ,\"Temperature, air, degrees Celsius\"\n  #                   ,\"pH\"\n  #                   ,\"Precipitation, total, inches\"\n  #                   )\n  #   USGS.Code.Desc <- as.data.frame(cbind(param.code,param.desc))\n  #   names(USGS.Code.Desc) <- c(\"Code\",\"Desc\")\n  #\n  ####################\n  # USGS Statistic Codes\n  # http://help.waterdata.usgs.gov/codes-and-parameters\n  # 00011 Instantaneous\n  # 00001 Max\n  # 00002 Min\n  # 00003 Mean (dataRetrieval default)\n  # 00006 Sum\n\n  # Define Counters for the Loop\n  intCounter <- 0\n  intCounter.Stop <- length(fun.myData.SiteID)\n  intItems.Total <- intCounter.Stop\n  print(paste0(\"Total items to process = \", intItems.Total))\n  flush.console()\n\n  myItems.Complete  <- 0\n\n  ######################\n  # Loop through sites\n  ######################\n\n  while (intCounter < intCounter.Stop)\n  {\n    intCounter <- intCounter+1\n    site_id <- fun.myData.SiteID[intCounter]\n    #\n    # Get available data\n    data.what.uv <- whatNWISdata(site_id,service=\"uv\")\n    # future versions to get all available data\n    data.what.uv.param <- data.what.uv[,\"parameter_nm\"]\n    #\n    #data.what.Codes <- as.vector(USGS.Code.Desc[,\"Code\"][data.what.uv[,\"parameter_nm\"]%in%USGS.Code.Desc$Desc])\n    data.what.Codes <- data.what.uv[,\"parm_cd\"]\n\n    # inform user\n\n    flog.debug(paste0(\"Getting available data for \",site_id))\n\n    # print(data.what.uv)\n\n    flush.console()\n\n    myCode <- data.what.Codes #\"00060\" #c(\"00060\",\"00065\") # can download multiple at one time\n    myStat <- \"00003\"  #data, not daily values\n    data.myGage <- readNWISuv(site_id\n                              ,myCode\n                              ,startDate=fun.myData.DateRange.Start\n                              ,endDate=fun.myData.DateRange.End\n                              , tz=myTZ )\n\n    # column headers are \"X_myCode_myStat\"\n    # can put in multipe and it only runs on those present\n    data.myGage <- renameNWISColumns(data.myGage\n                      ,p00060=myName.Discharge\n                      ,p00065=myName.WaterLevel\n                      ,p00010=myName.WaterTemp\n                      ,p00020=myName.AirTemp\n                      ,p00040=\"pH\"\n                      ,p00045=\"Precip.Total.in\"\n                      ,p00011=gsub(\".C\",\".F\",myName.WaterTemp)\n                      )\n    # different data structure for dataRetrieval\n    names(data.myGage)\n\n    # drop columns for Agency Code and TimeZone\n    myDrop <- c(\"agency_cd\",\"tz_cd\")\n    myKeep <- names(data.myGage)[! names(data.myGage) %in% myDrop]\n\n    data.myGage <- data.myGage[,myKeep]\n\n\n    ##############\n    # hard code only Discharge due to time limits on project\n\n  #   NewNames <- c(myName.SiteID,myName.DateTime,myName.Discharge,paste(\"_cd\",myName.Discharge,sep=\".\"))\n  #   names(data.myGage) <- NewNames\n\n\n    # replace \"_Inst\" with null and leave \"_cd\"\n    names(data.myGage) <- gsub(\"_Inst\",\"\",names(data.myGage))\n    # mod SiteID and DateTIme\n    names(data.myGage)[1:2] <- c(myName.SiteID,myName.DateTime)\n\n    ## Add GageID field so can retain (20160205)\n    data.myGage <- cbind(GageID=site_id, data.myGage)\n\n    # Rework Start and End Dates to match data in file\n    strFile.Date.Start  <- format(min(data.myGage[,myName.DateTime]),myFormat.Date)\n    strFile.Date.End    <- format(max(data.myGage[,myName.DateTime]),myFormat.Date)\n\n    # 10.0. Output file\n    # 10.1. Set Name\n    File.Date.Start <- format(as.Date(strFile.Date.Start, myFormat.Date),\"%Y%m%d\")\n    File.Date.End   <- format(as.Date(strFile.Date.End, myFormat.Date),  \"%Y%m%d\")\n\n    strFile.Out.Prefix <- \"Gage\"\n    strFile.Out <- paste(paste(site_id,\n                               fun.myData.Type,\n                               File.Date.Start,\n                               File.Date.End,\n                               sep=config.FileName.Delimiter),\n                            \"csv\",sep=\".\")\n\n    # 10.2. Save to File the data (overwrites any existing file).\n\n    strFile.full_name = file.path(myDir.data.export,strFile.Out)\n\n    write.csv(data.myGage, file=file.path(strFile.full_name), quote=FALSE, row.names=FALSE)\n    #\n    cat(paste0('Wrote CSV file' , \"\\n\\t\", strFile.full_name, \"\\n\"))\n\n    # 11.1. Inform user of progress and update LOG\n    myMsg <- \"COMPLETE\"\n    myItems.Complete <- myItems.Complete + 1\n    fun.Msg.Status(myMsg, intCounter, intItems.Total, site_id)\n\n    flush.console()\n\n    # 11.2. Remove data\n    rm(data.myGage)\n  }\n\n  ######################\n  # Loop through sites\n  ######################\n\n  # inform user task complete with status\n  print(paste(\"Task COMPLETE; \",round(difftime(Sys.time(),myTime.Start,units=\"mins\"),2),\" min.\",sep=\"\"))\n  flush.console()\n}\n\n",
    "created" : 1488996102416.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2220804763",
    "id" : "8F732D4D",
    "lastKnownWriteTime" : 1489018281,
    "last_content_update" : 1489018281792,
    "path" : "~/tn_realtime/working/R_scripts/libs/fun.GageData.R",
    "project_path" : "libs/fun.GageData.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}