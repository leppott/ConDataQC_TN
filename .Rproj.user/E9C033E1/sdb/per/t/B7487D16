{
    "collab_server" : "",
    "contents" : "# Sourced Routine\n##################\n# Statistical Summary\n##################\n# Erik.Leppo@tetratech.com (EWL)\n# 20151120\n##################\n# 20170116, EWL\n# added date & time QC\n##################\n#\n# Basic Operations:\n# load all files in data directory\n# perform Stats\n# write Stat summary file\n\n\n# library (load any required helper functions)\n# library(StreamThermal)\nlibrary(survival, quietly = TRUE, warn.conflicts = FALSE) # required for doBy\nlibrary(doBy, quietly = TRUE, warn.conflicts = FALSE)\n# should have been loaded by master script\n\nfun.Stats <- function(fun.myData.SiteID\n                     ,fun.myData.Type\n                     ,fun.myData.DateRange.Start\n                     ,fun.myData.DateRange.End\n                     ,fun.myDir.SUB.import\n                     ,fun.myDir.SUB.export\n                     ,fun.myProcedure.Step\n                     ,fun.myFile.Prefix) {\n  #\n#   ##########\n#   # QC (from fun.Master.R)\n#   ##########\n\n#   fun.myProcedure.Step <- \"STATS\"\n#   fun.myFile.Prefix <- \"DATA\"\n#   ###########\n  #\n  # Error Checking - only 1 SiteID and 1 DataType\n  if(length(fun.myData.SiteID)!=1){\n    myMsg <- \"Function can only handle 1 SiteID.\"\n    stop(myMsg)\n  }\n  if(length(fun.myData.Type)!=1){\n    myMsg <- \"Function can only handle 1 Data Type.\"\n    stop(myMsg)\n  }\n\n  # Convert Data Type to Camel Case\n  fun.myData.Type <- paste0(toupper(substring(fun.myData.Type,1,1)),\n                           tolower(substring(fun.myData.Type,2,nchar(fun.myData.Type))))\n  #\n  # data directories\n  myDir.data.import <- fun.myDir.SUB.import\n  myDir.data.export <- fun.myDir.SUB.export\n\n  #\n  myDate <- format(Sys.Date(),\"%Y%m%d\")\n  myTime <- format(Sys.time(),\"%H%M%S\")\n\n  # Verify input dates, if blank, NA, or null use all data\n  # if DateRange.Start is null or \"\" then assign it 1900-01-01\n  if (is.na(fun.myData.DateRange.Start) == TRUE || fun.myData.DateRange.Start==\"\"){\n    fun.myData.DateRange.Start <- DateRange.Start.Default\n  }\n\n  # if DateRange.End is null or \"\" then assign it today\n  if (is.na(fun.myData.DateRange.End)==TRUE||fun.myData.DateRange.End==\"\"){\n    fun.myData.DateRange.End<-DateRange.End.Default\n  }\n\n  # 0. Load Single file\n  strFile.Prefix     <- toupper(fun.myFile.Prefix)     # DATA = Aggregate, QC = QC\n  strFile.SiteID     <- fun.myData.SiteID\n  strFile.DataType   <- fun.myData.Type\n  strFile.Date.Start <- format(as.Date(fun.myData.DateRange.Start,\"%Y-%m-%d\"), \"%Y%m%d\")\n  strFile.Date.End   <- format(as.Date(fun.myData.DateRange.End,  \"%Y-%m-%d\"), \"%Y%m%d\")\n\n  strFile <- paste(paste(strFile.Prefix,\n                         strFile.SiteID,\n                         fun.myData.Type,\n                         strFile.Date.Start,\n                         strFile.Date.End,\n                         sep=config.FileName.Delimiter), \"csv\", sep=\".\")\n\n  strFile.Base  <- substr(strFile,1,nchar(strFile) - nchar(\".csv\"))\n  strFile.parts <- strsplit(strFile.Base, config.FileName.Delimiter)\n\n  # QC, make sure file exists\n  if(strFile %in% list.files(path=myDir.data.import)==FALSE) {\n    #\n    stop(paste0(\"Unable to generate summary statistics.  Can't find input file\\n\\t\",\n                file.path(myDir.data.import, strFile)))\n  }\n\n  #import the file\n  data.import <- read.csv(file.path(myDir.data.import, strFile), as.is=TRUE, na.strings=\"\")\n  #\n  # QC required fields: SiteID & (DateTime | (Date & Time))\n  fun.helper.CheckRequiredFields(names(data.import),paste(myDir.data.import,strFile,sep=\"/\"))\n  #\n\n  #\n  # QC date and time\n  # accessing files with Excel can change formats\n  # 20170116, EWL\n  data.import <- fun.QC.datetime(data.import)\n\n\n  # Define time period fields\n\n  myNames.Fields.TimePeriods <- c(myName.Yr,myName.YrMo,myName.MoDa,myName.Mo,myName.JuDa,myName.Season,myName.YrSeason)\n  # add time period fields\n  data.import[,myName.Yr]   <- format(as.Date(data.import[,myName.Date]),format=\"%Y\")\n  data.import[,myName.Mo]   <- format(as.Date(data.import[,myName.Date]),format=\"%m\")\n  data.import[,myName.YrMo] <- format(as.Date(data.import[,myName.Date]),format=\"%Y%m\")\n  data.import[,myName.MoDa] <- format(as.Date(data.import[,myName.Date]),format=\"%m%d\")\n  data.import[,myName.JuDa] <- as.POSIXlt(data.import[,myName.Date], format=myFormat.Date)$yday\n  ## add Season fields\n#   md <- data.import[,myName.MoDa]\n#   data.import[,myName.Season] <- NA\n#   data.import[,myName.Season][as.numeric(md)>=as.numeric(\"0101\") & as.numeric(md)<as.numeric(myTimeFrame.Season.Spring.Start)] <- \"Winter\"\n#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Spring.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Summer.Start)] <- \"Spring\"\n#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Summer.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Fall.Start)] <- \"Summer\"\n#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Fall.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Winter.Start)] <- \"Fall\"\n#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Winter.Start) & as.numeric(md)<as.numeric(\"1231\")] <- \"Winter\"\n#   data.import[,myName.SeasonYr] <- paste(data.import[,\"Season\"],data.import[,\"Year\"],sep=\"\")\n  data.import[,myName.Season] <- NA\n  data.import[,myName.Season][as.numeric(data.import[,myName.MoDa])>=as.numeric(\"0101\") & as.numeric(data.import[,myName.MoDa])<as.numeric(myTimeFrame.Season.Spring.Start)] <- \"Winter\"\n  data.import[,myName.Season][as.numeric(data.import[,myName.MoDa])>=as.numeric(myTimeFrame.Season.Spring.Start) & as.numeric(data.import[,myName.MoDa])<as.numeric(myTimeFrame.Season.Summer.Start)] <- \"Spring\"\n  data.import[,myName.Season][as.numeric(data.import[,myName.MoDa])>=as.numeric(myTimeFrame.Season.Summer.Start) & as.numeric(data.import[,myName.MoDa])<as.numeric(myTimeFrame.Season.Fall.Start)] <- \"Summer\"\n  data.import[,myName.Season][as.numeric(data.import[,myName.MoDa])>=as.numeric(myTimeFrame.Season.Fall.Start) & as.numeric(data.import[,myName.MoDa])<as.numeric(myTimeFrame.Season.Winter.Start)] <- \"Fall\"\n  data.import[,myName.Season][as.numeric(data.import[,myName.MoDa])>=as.numeric(myTimeFrame.Season.Winter.Start) & as.numeric(data.import[,myName.MoDa])<as.numeric(\"1231\")] <- \"Winter\"\n  data.import[,myName.YrSeason] <- paste(data.import[,myName.Yr],data.import[,myName.Season],sep=\"\")\n\n  #\n  # Loop - Parameter (n=3)\n  ## Temperature (Air/Water)\n  ## Flow (WaterLevel and Discharge)\n  ## Nothing on Pressure (used to calculate waterlevel)\n  # future add pH, Cond, etc from USGS gages\n  myFields.Data       <- c(myName.WaterTemp, myName.AirTemp, myName.WaterLevel)\n  myFields.Data.Flags <- c(myName.Flag.WaterTemp,myName.Flag.AirTemp,myName.Flag.WaterLevel)\n  myFields.Type       <- c(\"Thermal\",\"Thermal\",\"Hydrologic\")\n  myFields.Keep <- c(myName.SiteID\n                     ,myName.Date,myName.Time,myName.DateTime\n                     ,myNames.Fields.TimePeriods\n                     ,myFields.Data,myFields.Data.Flags\n                     )\n  # keep only fields needed for stats\n # data.import <- data.import[,myFields.Keep]\n\n  ###############################################\n\n    data2process <- myFields.Data[myFields.Data %in% names(data.import)]\n    print(paste(\"Total items to process = \",length(data2process),\":\",sep=\"\"))\n    print(data2process)\n      flush.console()\n\n  ############## QC\n  #i <- myFields.Data[1] #QC\n  ####################### change from myFields.Data to data2process (need to fix)\n\n  for (i in data2process) {##FOR.i.START\n    #\n    i.num <- match(i,myFields.Data)\n    Fields2Drop <- myFields.Data[-i.num]\n    data.stats <- data.import[,!(names(data.import) %in% Fields2Drop)]\n    # change fails to NA (so can na.rm=T when run stats)\n      # flag field\n      myFlag <- myFields.Data.Flags[i.num]\n    #data.stats.nofail <- data.stats[data.stats[,myFields.Data.Flags[i.num]]!=myFlagVal.Fail,]\n\n    #data.stats.nofail <- data.stats\n    #data.stats.nofail[data.stats.nofail[,data.stats[,myFields.Data.Flags[i.num]]=myFlagVal.Fail]] <- na\n\n    # change fail to NA for i (only if user define value == FALSE)\n    if(myStats.Fails.Exclude==TRUE) {##IF.myStats.Fails.Include.START\n      #\n      data.stats[,i][data.stats[,myFlag]==myFlagVal.Fail] <- NA\n      #\n    }##IF.myStats.Fails.Exclude.END\n\n    #\n    # summaryBy doesn't work with Group as variable (change value for running here)\n    # have to change some back for dv.i when save\n    names(data.stats)[names(data.stats) %in% myName.Date] <- \"Date\"\n    names(data.stats)[names(data.stats) %in% myName.YrMo] <- \"YearMonth\"\n    names(data.stats)[names(data.stats) %in% myName.YrSeason] <- \"YearSeason\"\n    names(data.stats)[names(data.stats) %in% myName.Yr] <- \"Year\"\n\n\n    # summaryBy not working with \"i\" as variable.  Have to do an ugly hack to get it working\n\n#     # QC\n#     print(\"test2\")\n#     print(i)\n#     print(\"data.stats\")\n#     print(head(data.stats))\n#     flush.console()\n#\n#\n#     data(dietox)\n#     dietox12    <- subset(dietox,Time==12)\n#     j <- \"Weight\"\n#\n#     x<-summaryBy(as.numeric(Weight)+Feed~Evit+Cu, data=dietox12,\n#               FUN=c(mean,var,length))\n#\n#     print(x)\n#     flush.console()\n#\n#    # myDF <- data.stats\n#     #x <- summaryBy(as.numeric(Water.Temp.C)~Date,data=myDF,FUN=c(mean),na.rm=TRUE)\n#     #print(dim(x))\n\n\n    # Create Daily Values (mean) (DV is USGS term so use that)\n\n    if(i==myFields.Data[1]) {\n      dv.i <- summaryBy(as.numeric(Water.Temp.C)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE\n                        , var.names=\"i\",id=c(myName.SiteID,\"Year\",\"YearMonth\",myName.Mo,myName.MoDa,myName.JuDa,myName.Season,\"YearSeason\"))\n    } else if(i==myFields.Data[2]) {\n      dv.i <- summaryBy(as.numeric(Air.Temp.C)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE\n                        , var.names=\"i\",id=c(myName.SiteID,\"Year\",\"YearMonth\",myName.Mo,myName.MoDa,myName.JuDa,myName.Season,\"YearSeason\"))\n    } else if (i==myFields.Data[3]) {\n      dv.i <- summaryBy(as.numeric(Water.Level.ft)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE\n                        , var.names=\"i\",id=c(myName.SiteID,\"Year\",\"YearMonth\",myName.Mo,myName.MoDa,myName.JuDa,myName.Season,\"YearSeason\"))\n    }\n\n\n#     dv.i <- summaryBy(as.numeric(data.stats[,i])~Date, data=data.stats, FUN=c(mean), na.rm=TRUE\n#                       , var.names=\"i\")#,id=c(myName.SiteID,\"Year\",\"YearMonth\",myName.MoDa,myName.JuDa,myName.Season,\"YearSeason\"))\n#\n\n\n    # rename fields back (use dv.i generated by summaryBy)\n    names(dv.i)[2] <- \"mean\"\n    names(dv.i)[names(dv.i) %in% \"Date\"] <- myName.Date\n    names(dv.i)[names(dv.i) %in% \"YearMonth\"] <- myName.YrMo\n    names(dv.i)[names(dv.i) %in% \"YearSeason\"] <- myName.YrSeason\n    names(dv.i)[names(dv.i) %in% \"Year\"] <- myName.Yr\n    # add parameter as column\n    dv.i[,\"Parameter\"] <- i\n    # rearrange columns\n    dv.i.ColOrder <- c(myName.SiteID,\"Parameter\",\"mean\",myName.Date,myNames.Fields.TimePeriods)\n    dv.i <- dv.i[,dv.i.ColOrder]\n\n    # save dv\n    strFile.Prefix.Out <- \"DV\"\n    strFile.Out <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=config.FileName.Delimiter),\"csv\",sep=\".\")\n    write.csv(dv.i,paste(myDir.data.export,strFile.Out,sep=\"/\"),quote=FALSE,row.names=FALSE)\n\n    # calculate daily mean, max, min, range, sd, n\n    # Define FUNCTION for use with summaryBy\n    myQ <- c(0.01,0.05,0.10,0.25,0.50,0.75,0.90,0.95,0.99)\n    myFUN.Names <- c(\"mean\",\"median\",\"min\",\"max\",\"range\",\"sd\",\"var\",\"cv\",\"n\",paste(\"q\",formatC(100*myQ,width=2,flag=\"0\"),sep=\"\"))\n    #\n    myFUN.sumBy <- function(x, ...){##FUN.myFUN.sumBy.START\n      c(mean=mean(x,na.rm=TRUE)\n        ,median=median(x,na.rm=TRUE)\n        ,min=min(x,na.rm=TRUE)\n        ,max=max(x,na.rm=TRUE)\n        ,range=max(x,na.rm=TRUE)-min(x,na.rm=TRUE)\n        ,sd=sd(x,na.rm=TRUE)\n        ,var=var(x,na.rm=TRUE)\n        ,cv=sd(x,na.rm=TRUE)/mean(x,na.rm=TRUE)\n        ,n=length(x)\n        ,q=quantile(x,probs=myQ,na.rm=TRUE)\n        )\n    }##FUN.myFUN.sumBy.END\n    #\n    #\n    # summaryBy doesn't work with Group as variable (change value for running here)\n    # have to change some back for dv.i.* when save\n    names(data.stats)[names(data.stats) %in% myName.Date] <- \"Date\"\n    names(data.stats)[names(data.stats) %in% myName.Date] <- \"Date\"\n    names(data.stats)[names(data.stats) %in% myName.YrMo] <- \"YearMonth\"\n    names(data.stats)[names(data.stats) %in% myName.YrSeason] <- \"YearSeason\"\n    names(data.stats)[names(data.stats) %in% myName.Yr] <- \"Year\"\n    names(data.stats)[names(data.stats) %in% myName.Mo] <- \"Month\"\n    names(data.stats)[names(data.stats) %in% myName.Season] <- \"Season\"\n\n    #\n    #\n    # Save plots as PDF\n    strFile.Prefix.Out <- fun.myProcedure.Step\n    strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=config.FileName.Delimiter),\"pdf\",sep=\".\")\n    pdf(file=paste(myDir.data.export,strFile.plot,sep=\"/\"),width=11,height=8.5)\n\n      #\n      ## Daily\n        myTimeFrame <- \"day\"\n        myTF.Field <- myName.Date\n        myDF <- data.stats\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~Date,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        if(i==myFields.Data[1]) {\n          stats.i <- summaryBy(as.numeric(Water.Temp.C)~Date,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        } else if(i==myFields.Data[2]) {\n          stats.i <- summaryBy(as.numeric(Air.Temp.C)~Date,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        } else if (i==myFields.Data[3]) {\n          stats.i <- summaryBy(as.numeric(Water.Level.ft)~Date,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        }\n        #######\n        # Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.d <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n          plot(stats.i$mean,type=myPlot.Type\n               ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n               ,ylim=c(min(stats.i$min),max(stats.i$max)))\n          myCol <- \"gray\"\n          lines(stats.i$max,col=myCol)\n          lines(stats.i$min,col=myCol)\n          polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n          lines(stats.i$mean)\n          # X-Axis\n          n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n          pct <- c(20,40,60,80,100)*.01\n          myAT <- c(1,round(n.Total * pct,0))\n          myLab <- stats.i[,\"TimeValue\"][myAT]\n          axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n      #\n        ## Julian Day\n        myTimeFrame <- \"JulianDay\"\n        myTF.Field <- myName.JuDa\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~YearMonth,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        stats.i <- summaryBy(as.numeric(mean)~JulianDay,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        #Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.jd <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        pct <- c(20,40,60,80,100)*.01\n        myAT <- c(1,round(n.Total * pct,0))\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n        #\n      ## Year_Month\n        myTimeFrame <- \"year_month\"\n        myTF.Field <- myName.YrMo\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~YearMonth,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n          stats.i <- summaryBy(as.numeric(mean)~YearMonth,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        #Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.ym <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        myAT <- 1:n.Total\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n      #\n        #\n        ## Month (all years)\n        myTimeFrame <- \"month\"\n        myTF.Field <- myName.Mo\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~YearMonth,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        stats.i <- summaryBy(as.numeric(mean)~Month,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        #Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.m <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        myAT <- 1:n.Total\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n        #\n      ## Year_Season\n        myTimeFrame <- \"year_season\"\n        myTF.Field <- myName.YrSeason\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~SeasonYear,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        stats.i <- summaryBy(as.numeric(mean)~YearSeason,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        # Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.ys <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        myAT <- 1:n.Total\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n      #\n        #\n        ## Season (all years)\n        myTimeFrame <- \"season\"\n        myTF.Field <- myName.Season\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~SeasonYear,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        stats.i <- summaryBy(as.numeric(mean)~Season,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        # Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.s <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        myAT <- 1:n.Total\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n        #\n      ## Year\n        myTimeFrame <- \"year\"\n        myTF.Field <- myName.Yr\n        myDF <- dv.i\n        #stats.i <- summaryBy(as.numeric(myDF[,i])~Year,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        ####### ugly hack\n        stats.i <- summaryBy(as.numeric(mean)~Year,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)\n        #######\n        # Range\n        #stats.i[,paste(myTimeFrame,\"range\",sep=\".\")] <- stats.i[,paste(myTimeFrame,\"max\",sep=\".\")] - stats.i[,paste(myTimeFrame,\"min\",sep=\".\")]\n        # rename\n        names(stats.i) <- c(\"TimeValue\",myFUN.Names)\n        stats.i[,\"Parameter\"] <- i\n        stats.i[,\"TimeFrame\"] <- myTimeFrame\n        stats.i.y <- stats.i\n        # plot\n        myPlot.Type <- ifelse(nrow(stats.i)==1,\"p\",\"l\")\n        #strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,myTimeFrame,sep=\"_\"),\"png\",sep=\".\")\n        #png(file=paste(myDir.data.export,strFile.plot,sep=\"/\"))\n        plot(stats.i$mean,type=myPlot.Type\n             ,main=i,ylab=\"mean\",xlab=myTimeFrame,xaxt=\"n\"\n             ,ylim=c(min(stats.i$min),max(stats.i$max)))\n        myCol <- \"gray\"\n        lines(stats.i$max,col=myCol)\n        lines(stats.i$min,col=myCol)\n        polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)\n        lines(stats.i$mean)\n        # X-Axis\n        n.Total <- length(factor(stats.i[,\"TimeValue\"]))\n        myAT <- 1:n.Total\n        myLab <- stats.i[,\"TimeValue\"][myAT]\n        axis(1,at=myAT,labels=myLab,tick=TRUE)\n        #dev.off()\n      #\n      #\n\n    dev.off()##PDF.END\n\n    #\n    #\n    # Combine (all the same so just rbind)\n    stats.i.ALL <- rbind(stats.i.y,stats.i.s,stats.i.ys,stats.i.m,stats.i.ym,stats.i.jd,stats.i.d)\n    stats.i.ALL[,myName.SiteID] <- fun.myData.SiteID\n\n    # rearrange columns (last 2 to first 2)\n    myCol.Order <- c(ncol(stats.i.ALL),(ncol(stats.i.ALL)-2),(ncol(stats.i.ALL)-1),1:(ncol(stats.i.ALL)-3))\n    #stats.i.ALL <- stats.i.ALL[,c(myName.SiteID,(ncol(stats.i.ALL)-2):(ncol(stats.i.ALL)-1),2:ncol(stats.i.ALL)-3)]\n    stats.i.ALL <- stats.i.ALL[,myCol.Order]\n    # save stats\n    strFile.Prefix.Out <- fun.myProcedure.Step\n    strFile.Out <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=config.FileName.Delimiter),\"csv\",sep=\".\")\n    write.csv(stats.i.ALL,paste(myDir.data.export,strFile.Out,sep=\"/\"),quote=FALSE,row.names=FALSE)\n    #\n\n    # need to inform user what part of loop\n\n\n    #\n  }\n\n  return()\n}\n\n\n",
    "created" : 1489080795719.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3890634745",
    "id" : "B7487D16",
    "lastKnownWriteTime" : 1489080800,
    "last_content_update" : 1489080800219,
    "path" : "~/tn_realtime/working/R_scripts/libs/fun.Stats.R",
    "project_path" : "libs/fun.Stats.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}