{
    "collab_server" : "",
    "contents" : "#!/cygdrive/c/Program Files/R/R-3.3.2patched/bin/R\n#\n# Manipulates Continuous Data Files (run different operations based on user input below)\n# Erik.Leppo@tetratech.com (EWL), 2015-11-19\n#\n#################\n# It is assumed that this R script is stored in a directory with the data files as subdirectories.\n# If this script is run in TINN-R or R-Studio there is no need to define the working directory\n#\n####################################################################\n\n# clear the workspace\n#\nrm( list = ls() )\n\n# Define working Directory\n#\nconfig.Folder.Root <- \"C:/Data_and_Tools/tn_realtime/working/R_scripts\"\n\n# Define location of the libs Directory\n#\nconfig.Folder.Libs <- file.path(config.Folder.Root, \"libs\")\n\n# load all other libraries via the InitializeLibs.R\n\nsetwd(config.Folder.Libs)\n\nisRStudio <- Sys.getenv(\"RSTUDIO\") == \"1\"\n\nif (isRStudio){\n  debugSource(\"fun.InitializeLibs.R\")\n} else\n{\n  source(\"fun.InitializeLibs.R\")\n}\nsetwd(config.Folder.Root)\n\n#####################################################################\n#\n# USER input in this section (see end of script for explanations)\n#\n#####################################################################\n\nsetwd(config.Folder.Libs)\nif (isRStudio){\n  debugSource(\"user_config.R\")\n} else {\n  source(\"user_config.R\")\n}\nsetwd(config.Folder.Root)\n\n# Operation\n#\nUserOptions.Operation   <- c(\"GetGageData\",\"QCRaw\", \"ReportQC\", \"Aggregate\", \"ReportAggregate\", \"SummaryStats\")\n# UserSelection.Operation <- 'QCRaw'\nUserSelection.Operation <- UserOptions.Operation[2]  # number corresponds to intended operation in the line above\n\n\n# Site ID\n# \"test2\", \"HRCC\", \"PBCC\",\nUserOptions.SiteID   <-  c(\"ECO66G12\", \"ECO66G20\", \"ECO68C20\", \"01187300\", \"02035000\")\n# UserSelection.SiteID <- \"testsiteID\"\nUserSelection.SiteID <- UserOptions.SiteID[1] #number corresponds to index of the site id array defined\n# UserSelection.SiteID <- c(UserOptions.SiteID[7], UserOptions.SiteID[8]) # an array is optional for GetGageData\n\n# data type - Type of data file\n#\nUserOptions.DataType <- c(\"Air\",\"Water\",\"AW\",\"AirWater\",\"Gage\",\"AWG\",\"AG\",\"WG\")\nUserSelection.DataType <- UserOptions.DataType[2] #number corresponds to intended operation in the line above\n\n#\n# df[,mCol][df[,myCol]==\"P\",] <- NA\n#\n\n# start date\n# YYYY-MM-DD (\"-\" delimiter), leave blank for all data (\"1900-01-01\")\n#UserSelection.DateRange.Start  <- \"2010-09-25\"\nUserSelection.DateRange.Start  <- \"\"\n\n# end date\n# YYYY-MM-DD (\"-\" delimiter), leave blank for all data (today)\n#UserSelection.DateRange.End    <- \"2015-12-11\"\nUserSelection.DateRange.End    <- \"\"\n\n# Vector to hold recognized folders.\nUserOptions.Folders <- c(\"C:\\\\Data_and_Tools\\\\tn_realtime\\\\working\\\\R_scripts\\\\data\\\\Data1_RAW\",\n                         \"C:\\\\Data_and_Tools\\\\tn_realtime\\\\working\\\\R_scripts\\\\data\\\\Data2_QC\",\n                         \"Data3_Aggregated\",\n                         \"Data4_Stats\",\n                         \"C:\\\\inetpub\\\\wwwdjango\\\\tndec\\\\tndecsite\\\\documents\\\\incoming\",\n                         \"C:\\\\inetpub\\\\wwwdjango\\\\tndec\\\\tndecsite\\\\documents\\\\processed\\\\qc_data\",\n                         \"C:\\\\software\\\\Bitnami\\\\djangostack-1.10.5-0\\\\apps\\\\tndec\\\\tndecsite\\\\documents\\\\incoming\",\n                         \"C:\\\\software\\\\Bitnami\\\\djangostack-1.10.5-0\\\\apps\\\\tndec\\\\tndecsite\\\\documents\\\\processed\\\\qc_data\"\n                         )\n\n# input folder.  Leave blank for default which is determined using the UserSelection.Operation\n#\nUserSelection.ImportFolder <- \"\"\nUserSelection.ImportFolder <- UserOptions.Folders[1]\n\n\n# export folder.  Leave blank for default which is determined using the UserSelection.Operation\n#\nUserSelection.ExportFolder <- \"\"\nUserSelection.ExportFolder <- UserOptions.Folders[8]\n\n\n#################\n#\n# Setup and check the import and export folders for this operation and list user settings to this point\n#\n#################\n\nfound_operation <- grep(UserSelection.Operation, UserOptions.Operation, value = TRUE)\nif (! length(found_operation) == 1) {\n  stop(paste0('Must select a valid [--operation]  Unable to process [',\n              UserSelection.Operation, ']!.\\nValid options are [',\n              paste(UserOptions.Operation, collapse = ', '), ']'))\n}\nUserSelection.Operation = found_operation\n\ncheck_delimiter <- grepl(config.FileName.Delimiter, UserSelection.SiteID) #T/F\nif(check_delimiter == TRUE)\n{\n  stop(paste0(\"SiteID (\", UserSelection.SiteID, \") contains the delimiter [\", config.FileName.Delimiter,\n              \"] used in parsing file names.\\nChange SiteID name so it does not include the delimiter.\"))\n}\n\nmyDate <- format(Sys.Date(),\"%Y%m%d\")\nmyTime <- format(Sys.time(),\"%H%M%S\")\n\n# Verify input dates, if blank, NA, or null use all data\n# if DateRange.Start is null or \"\" then assign it 1900-01-01\nif (is.na(UserSelection.DateRange.Start) == TRUE || UserSelection.DateRange.Start==\"\")\n{\n  UserSelection.DateRange.Start <- DateRange.Start.Default\n}\n\n# if DateRange.End is null or \"\" then assign it today\nif (is.na(UserSelection.DateRange.End)==TRUE || UserSelection.DateRange.End==\"\")\n{\n  UserSelection.DateRange.End <- DateRange.End.Default\n}\n\nflog.debug(paste0(replicate(80, '#'), collapse=\"\"))\nflog.debug(paste0('Data Operation = [', UserSelection.Operation, ']'))\nflog.debug(paste0('SiteID = [', UserSelection.SiteID, ']'))\nflog.debug(paste0('Data Type = [', UserSelection.DataType, ']'))\nflog.debug(paste0('Data Date Range = [', UserSelection.DateRange.Start, '] to [', UserSelection.DateRange.End, ']'))\n\n# get final import and export folders path based on user setting and default value\n# if the folder doesn't exist the script exits within the function\nUserSelection.ImportFolder <- fun.ImportFolderPath(UserSelection.ImportFolder, UserSelection.Operation)\nflog.debug(paste0('Import Directory = [', UserSelection.ImportFolder, ']'))\n\nUserSelection.ExportFolder <- fun.ExportFolderPath(UserSelection.ExportFolder, UserSelection.Operation)\nflog.debug(paste0('Export Directory = [', UserSelection.ExportFolder, ']'))\n\n#################\n#\n# Run function based on value of \"UserSelection.Operation\"\n#\n#################\n\nswitch(UserSelection.Operation,\n\n  \"GetGageData\"= {\n    fun.GageData(\n                  UserSelection.SiteID\n                 ,\"Gage\"\n                 ,UserSelection.DateRange.Start\n                 ,UserSelection.DateRange.End\n                 ,UserSelection.ImportFolder\n                 ,UserSelection.ExportFolder\n                 )\n  },\n  # this function also runs the ReportQC\n  \"QCRaw\"= {\n    fun.QC(\n            UserSelection.SiteID\n           ,UserSelection.DataType\n           ,UserSelection.DateRange.Start\n           ,UserSelection.DateRange.End\n           ,UserSelection.ImportFolder\n           ,UserSelection.ExportFolder\n          )\n  },\n  \"ReportQC\" = {\n    fun.Report(\n                UserSelection.SiteID\n               ,UserSelection.DataType\n               ,UserSelection.DateRange.Start\n               ,UserSelection.DateRange.End\n               ,UserSelection.ImportFolder\n               ,UserSelection.ExportFolder\n               ,\"QC\"\n     )\n  },\n  \"Aggregate\" = {\n    fun.AggregateData(\n                      UserSelection.SiteID\n                      ,UserSelection.DataType\n                      ,UserSelection.DateRange.Start\n                      ,UserSelection.DateRange.End\n                      ,UserSelection.ImportFolder\n                      ,UserSelection.ExportFolder\n                      )\n  },\n  \"ReportAggregate\" = {\n    fun.Report(\n               UserSelection.SiteID\n               ,UserSelection.DataType\n               ,UserSelection.DateRange.Start\n               ,UserSelection.DateRange.End\n               ,UserSelection.ImportFolder\n               ,UserSelection.ExportFolder\n               ,\"DATA\"\n               )\n  },\n  \"SummaryStats\" = {\n    fun.Stats(\n               UserSelection.SiteID\n              ,UserSelection.DataType\n              ,UserSelection.DateRange.Start\n              ,UserSelection.DateRange.End\n              ,UserSelection.ImportFolder\n              ,UserSelection.ExportFolder\n              ,\"STATS\"\n              ,\"DATA\"\n              )\n  },\n  {\n    stop(paste0(\"Unable to process myData.Operation == \", myData.Operation))\n  }\n)\n\n# exit script\n\n",
    "created" : 1488814602883.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "939889676",
    "id" : "900F9A21",
    "lastKnownWriteTime" : 1490287327,
    "last_content_update" : 1490287327657,
    "path" : "~/tn_realtime/working/R_scripts/00_MasterScript.R",
    "project_path" : "00_MasterScript.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}