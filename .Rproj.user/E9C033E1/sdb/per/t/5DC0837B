{
    "collab_server" : "",
    "contents" : "# Sourced Routine\n##################\n# Generate QC Report\n#########################\n# Erik.Leppo@tetratech.com (EWL)\n# 20151022\n###################\n# Basic Operations:\n# load all files in data directory\n# find ones specified by user\n# generate QC data summaries\n# output to PDF\n#####################\n## ideas\n# load one file instead of all\n################\n\n# library (load any required helper functions)\n\nlibrary(knitr, quietly = TRUE, warn.conflicts = FALSE)\n\n\n# FUNCTION\nfun.Report <- function(fun.myData.SiteID\n                         ,fun.myData.Type\n                         ,fun.myData.DateRange.Start\n                         ,fun.myData.DateRange.End\n                         ,fun.myDir.SUB.import\n                         ,fun.myDir.SUB.export\n                         ,fun.myFile.Prefix) {\n  #\n  # Convert Data Type to Camel Case\n  fun.myData.Type <- fun.CamelCase(fun.myData.Type)\n\n  #\n  # data directories\n  myDir.data.import <- fun.myDir.SUB.import\n  myDir.data.export <- fun.myDir.SUB.export\n\n  #\n  # Start Time (used to determine run time at end)\n  myTime.Start <- Sys.time()\n\n  myDate <- format(Sys.Date(),\"%Y%m%d\")\n  myTime <- format(myTime.Start,\"%H%M%S\")\n\n  #\n  # 0. Load Single file\n  strFile.Prefix     <- toupper(fun.myFile.Prefix)     # DATA = Aggregate, QC = QC\n  strFile.SiteID     <- fun.myData.SiteID\n  strFile.DataType   <- fun.myData.Type\n  strFile.Date.Start <- format(as.Date(fun.myData.DateRange.Start,\"%Y-%m-%d\"),\"%Y%m%d\")\n  strFile.Date.End   <- format(as.Date(fun.myData.DateRange.End,\"%Y-%m-%d\"),\"%Y%m%d\")\n  strFile = paste(paste(strFile.Prefix,\n                        strFile.SiteID,\n                        fun.myData.Type,\n                        strFile.Date.Start,\n                        strFile.Date.End,\n                        sep=config.FileName.Delimiter),\n                        \"csv\", sep=\".\")\n\n  strFile.source.full_name = file.path(myDir.data.import, strFile)\n\n  if (! file.exists(strFile.source.full_name))\n  {\n    flog.error(paste0(\"1. Unable to find CSV file to use to create report document:\\n\\t\", strFile.source.full_name))\n    stop()\n  }\n\n  strFile.Base <- substr(strFile,1,nchar(strFile)-nchar(\".csv\"))\n  strFile.parts <- strsplit(strFile.Base,config.FileName.Delimiter)\n\n  # import the file\n  data.import <- read.csv(strFile.source.full_name, as.is=TRUE, na.strings=\"\")\n\n  # pick 'report' based on prefix\n  switch(strFile.Prefix,\n    \"QC\"= {\n      myReport.Name <- \"Report_QC\"\n    },\n    \"DATA\" = {\n      myReport.Name <- \"Report_Aggregate\"\n    },\n    \"STATS\" =\n    {\n      myReport.Name <- \"Report_Stats\"\n    }\n  )\n\n  # prepare the complete name to the markdown file\n  strFile.RMD <- file.path(config.Folder.Markdown, paste(myReport.Name,\"rmd\", sep=\".\"))\n\n  if (! file.exists(strFile.RMD))\n  {\n    stop(paste0(\"1. Unable to find markdown file:\\n\\t\", strFile.RMD))\n  }\n\n  # prepare the filename\n  strFile.DOCX <- paste0(paste(strFile.Prefix,\n                                strFile.SiteID,\n                                fun.myData.Type,\n                                strFile.Date.Start,\n                                strFile.Date.End,\n                                myReport.Name, sep=config.FileName.Delimiter),\".docx\")\n\n  #\n  # create the report word document, but hide the messages that look like this\n  # NULL\n  # Warning messages:\n  #   1: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 2: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 3: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 4: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 5: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 6: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 7: In xy.coords(x, y) : NAs introduced by coercion\n  # 8: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  # 9: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n  #\n  suppressWarnings(\n    rmarkdown::render(strFile.RMD,\n                      output_file=strFile.DOCX,\n                      output_dir=myDir.data.export,\n                      quiet=TRUE)\n  )\n  #######################################################################\n\n  # Clean up\n  rm(data.import)\n  rm(data.plot)\n\n  ###########################################################################\n  #\n  # inform user task complete with status\n\n  strFile.export.full_name = file.path(myDir.data.export,strFile.DOCX)\n\n  flog.debug(paste0('Wrote DOCX file' , \"\\n\\t\", strFile.export.full_name))\n\n  flog.debug(paste0(\"Task COMPLETE. QC Report.  Total time = \",format(difftime(Sys.time(), myTime.Start))))\n\n  return()\n}\n\n\n\n",
    "created" : 1488993029399.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2465471570",
    "id" : "5DC0837B",
    "lastKnownWriteTime" : 1489099897,
    "last_content_update" : 1489099897215,
    "path" : "~/tn_realtime/working/R_scripts/libs/fun.Report.R",
    "project_path" : "libs/fun.Report.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}